# -*- coding: utf-8 -*-
"""NIYITEGEKA Isaie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1THZ2eE-EVhFthYs6V6ePxASGlv4rN5pa
"""

import requests
import time
import smtplib
from email.mime.text import MIMEText
import logging
import threading

# Configuration
MONITOR_INTERVAL = 200  # 5 minutes in seconds
EMAIL_ADDRESS = "isaieniyitegeka2@gmail.com"  # Replace with your email
EMAIL_PASSWORD = "Isaie@123"  # Replace with your password or app password
RECIPIENT_EMAIL = "recipient@example.com" #replace with recipient email
LOG_FILE = "website_monitor.log"
URLS_TO_MONITOR = ["https://uok.ac.rw", "https://www.example.com"] # Add more URLs as needed

# Logging setup
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def send_email(subject, body):
    """Sends an email alert."""
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = RECIPIENT_EMAIL
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            smtp.send_message(msg)
        logging.info("Email alert sent successfully.")
    except Exception as e:
        logging.error(f"Failed to send email: {e}")

def check_website(url):
    """Checks the status of a website and returns a status message."""
    try:
        response = requests.get(url, timeout=10) #increased timeout
        response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
        return f"Website {url} is up (Status: {response.status_code})"
    except requests.exceptions.RequestException as e:
        logging.error(f"Website {url} is unreachable: {e}")
        return f"Website {url} is unreachable."
    except requests.exceptions.HTTPError as e:
        logging.error(f"Website {url} returned an error status: {e}")
        return f"Website {url} returned error status. {e}"

def monitor_websites():
    """Monitors websites periodically and sends alerts."""
    while True:
        for url in URLS_TO_MONITOR:
            status = check_website(url)
            print(status)
            if "unreachable" in status or "error status" in status:
                send_email("Website Down Alert", f"Website {url} is down or returned an error.\n\n{status}")
        time.sleep(MONITOR_INTERVAL)

def run_monitor_in_thread():
    monitor_thread = threading.Thread(target=monitor_websites)
    monitor_thread.daemon = True #thread will close with main program.
    monitor_thread.start()

run_monitor_in_thread() #Start the monitor in a background thread.

#Example of how to use the check_website function outside the loop.
#print(check_website("https://uok.ac.rw"))